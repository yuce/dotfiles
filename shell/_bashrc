# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

function gitprompt()
{
    stat=`git status 2>/dev/null | head -1`
    if [ "$stat" != "" ]
    then
        #printf "%*s" $COLUMNS "(${stat:10})"
        echo " (${stat:10})"
    fi
}

# ... and ignore same sucessive entries.
export HISTCONTROL=ignoreboth

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize
shopt -s histappend

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"
# E=$(printf "\e")
PS1='\[\033[01;31m\]\w\[\033[00m\]$(gitprompt)\n\[\033[00;32m\]\u@\h\[\033[00m\]|\[\033[01;34m\]\t\[\033[00m\]|\[\033[36m\]\!\[\033[00m\]\$ '

#export PS1='\[$(tput setaf 3;gitprompt;tput setaf 1)\w\n\]$'

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ "$TERM" != "dumb" ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    #alias dir='ls --color=auto --format=vertical'
    #alias vdir='ls --color=auto --format=long'
fi

if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

export NODEPATH=$HOME/node
export GOROOT=$HOME/go
export DNXHOME=$HOME/dnx
export JAVA_HOME=$HOME/jdk

export PATH=$PATH:$HOME/bin:/opt/otp/bin:/opt/elixir/bin:$NODEPATH/bin:$GOROOT/bin:$JAVA_HOME/bin:$HOME/.cargo/bin:$HOME/.cache/rebar3/bin
export EDITOR=/usr/bin/vim
export LC_ALL=en_US.UTF-8

# export GOPATH=$HOME/go_path

alias ..="cd .."
alias ...='cd ../..'

# bookmark support
alias m1='alias j1="cd `pwd`"'
alias m2='alias j2="cd `pwd`"'
alias m3='alias j3="cd `pwd`"'
alias m4='alias j4="cd `pwd`"'
alias m5='alias j5="cd `pwd`"'

# git related
alias g.s='git status -s'
alias g.d='git diff'
alias g.a='git add'
alias g..='cd $(git rev-parse --show-cdup)'
alias g.m='git commit -m'
alias g.o='git checkout'
alias g.ob='git checkout -b'

# ramdisk
alias mount_ramdisk='sudo mount -t tmpfs -o size=1024M ramdisk $HOME/ramdisk'
alias umount_ramdisk='sudo umount $HOME/ramdisk'

alias https='http --default-scheme=https'
alias ll='ls -lh'
#alias open='xdg-open > /dev/null 2>&1'

export PIP_DOWNLOAD_CACHE=$HOME/.pip_download_cache
export AUTOSRC_FILENAME=.change-this-in-your-private-settings

echo
. $HOME/bin/z.sh

if [ -f $HOME/.bashrc_private ]
then
    source $HOME/.bashrc_private
fi

mcd()
{
    test -e "$1" || mkdir -p "$1"
    cd "$1"
}

hist () {
    local C=$(history | cut -c8- | fzf) && $C
}

autosrc_cd () {
    if [ "$(type -t autosrc_end)" == "function" ]
    then
        autosrc_end
        unset -f autosrc_end
    fi
    if [ "$1" != "" ]
    then
        local autorun_path="$1/$AUTOSRC_FILENAME"
        if [ -f $autorun_path ]
        then
            . $autorun_path
        fi
        builtin cd "$1"
        if [ "$(type -t autosrc_begin)" == "function" ]
        then
            autosrc_begin
            unset -f autosrc_begin
        fi
    fi
}

touch_autosrc () {
    touch $AUTOSRC_FILENAME
    echo $AUTOSRC_FILENAME
}

alias acd=autosrc_cd

__BOOKMARKS_DIR=$HOME/.bookmarks
__read_bookmarks () {
    if [ "$1" != "" ]
    then
        local bookmark_path="$__BOOKMARKS_DIR/$1"
    else
        local bookmark_path="$__BOOKMARKS_DIR/DEFAULT"
    fi
    if [ -f $bookmark_path ]
    then
        cat $bookmark_path
    else
        return 1
    fi
}

mb () {
    if [ ! -d $__BOOKMARKS_DIR ]
    then
        mkdir -p $__BOOKMARKS_DIR
    fi
    if [ "$1" != "" ]
    then
        local bookmark_path="$__BOOKMARKS_DIR/$1"
    else
        local bookmark_path="$__BOOKMARKS_DIR/DEFAULT"
    fi
    local path=$(pwd)
    if [ -f $bookmark_path ]
    then
        printf "\n$path" >> $bookmark_path
    else
        printf "$path" > $bookmark_path
    fi
}

mj () {
    local bookmarks=$(__read_bookmarks $1)
    local bookmark_count=$(echo "$bookmarks" | wc -l)
    if [ $bookmark_count -lt 2 ]
    then
        local bookmark="$bookmarks"
    else
        local bookmark=$(echo "$bookmarks" | fzf)
    fi
    if [ "$bookmark" != "" ]
    then
        acd "$bookmark"
    fi
}

