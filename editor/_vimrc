
syntax on
behave xterm
set noswapfile

" security
set nomodeline
set modelines=0

set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=indent,eol,start	" more powerful backspacing

" Now we set some defaults for the editor
set tabstop=4
set shiftwidth=4
set smarttab
set expandtab
set softtabstop=4
set autoindent
set linebreak		" Don't wrap words by default
set textwidth=0		" Don't wrap lines by default
set nobackup
set viminfo='20,\"50	" read/write a .viminfo file, don't store more than
  			" 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set nu
set nofoldenable " turn off folding

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" We know xterm-debian is a color terminal
if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
set t_Co=16
set t_Sf=^[[3%dm
set t_Sb=^[[4%dm
endif

filetype plugin on

" set the theme
set t_Co=256   " This is may or may not needed.

set background=light
colorscheme PaperColor

if has('gui_running')
    " Make shift-insert work like in Xterm
    map <S-Insert> <MiddleMouse>
    map! <S-Insert> <MiddleMouse>
    "colorscheme darkblue
    set guioptions -=m
    set guioptions -=T
endif

":set cursorline
":hi CursorLine ctermbg=darkblue
":hi CursorLine ctermbg=darkblue guibg=darkblue
autocmd InsertLeave * hi CursorLine cterm=none ctermbg=lightgray
autocmd InsertEnter * hi CursorLine cterm=bold ctermbg=none

hi RedundantSpaces ctermbg=red guibg=red
match RedundantSpaces /\s\+$\| \+\ze\t/

hi LineNr guibg=darkgray guifg=black

" turn on highlighting current line
set cursorline

"" highlight lines with length > 80
"hi LineTooLong ctermbg=yellow guibg=LightYellow
"match LineTooLong /\%>80v.\+/

set listchars=tab:>-,trail:.,extends:>

"imap <khome> <home>
"nmap <khome> <home>
"inoremap <silent> <home> <C-O>:call Home()<CR>
"nnoremap <silent> <home> :call Home()<CR>
"function Home()
"    let curcol = wincol()
"    normal ^
"    let newcol = wincol()
"    if newcol == curcol
"        normal 0
"    endif
"endfunction
"
"imap <kend> <end>
"nmap <kend> <end>
"inoremap <silent> <end> <C-O>:call End()<CR>
"nnoremap <silent> <end> :call End()<CR>
"function End()
"    let curcol = wincol()
"    normal g$
"    let newcol = wincol()
"    if newcol == curcol
"        normal $
"    endif
"    if virtcol(".") == virtcol("$") - 1
"        normal $
"    endif
"endfunction

set statusline=%F%m%r\ [%Y\ %{&ff}\ %{&encoding}]\ Buf:%n\ Line:%l/%L\ Col:%c%V\ \(%p%%\)
set laststatus=2
set showcmd
set ignorecase
set smartcase

" save the buffer automatically on :make
set autowrite

map <M-Down> gj
map <M-Up> gk
imap <M-Up> <ESC>gki
imap <M-Down> <ESC>gji

map gf :edit <cfile><CR>
nmap <leader>tt :TlistToggle<CR>

" hit <F5> to draw a line under current line
nnoremap <F5> yyp<c-v>$r-
inoremap <F5> <Esc>yyp<c-v>$r-A
nnoremap <s-F5> yyp<c-v>$r=
inoremap <s-F5> <Esc>yyp<c-v>$r=A

" hit \- to draw a line (-)
" hit \= to draw a line (=)

nnoremap <Leader>l- yyp^v$r-o<Esc>
nnoremap <Leader>l= yyp^v$r=o<Esc>
nnoremap <Leader>l+ yyp^v$r+o<Esc>
nnoremap <Leader>l. yyp^v$r.o<Esc>
inoremap <Leader>{ {<CR>}<Esc><s-o>
"inoremap <Leader>f <Esc>bifunction <Esc>lea()<c-m>{<c-m>}<Esc><s-o><Tab><Esc>2kf(a

" Go support
" builtin: \gd go-to-definition
au FileType go nmap <leader>gi :GoInfo<CR>
au FileType go nmap <leader>gt :GoTestFunc<CR>
au FileType go nmap <leader>gm :GoImplements<CR>
au FileType go nmap <leader>gr :GoRename<CR>
au FileType go nmap <leader>gs :GoReferrers<CR>
au FileType go nmap <leader>gh :GoSameIdsToggle<CR>
au FileType go nmap <leader>ge :GoDecls<CR>


" toggle to paste correctly from system clipboard
set pastetoggle=<F2>

" ca65 language support
filetype plugin indent on
augroup filetypedetect
    au BufNewFile,BufRead *.s,*.inc set ft=asm_ca65
augroup END

" assoc .pl files to prolog
au BufRead,BufNewFile *.pl set ft=prolog
"
" assoc .ecl files to prolog
au BufRead,BufNewFile *.ecl set ft=prolog

au BufRead,BufNewFile *.lil set ft=lil
